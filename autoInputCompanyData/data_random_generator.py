import random

class RandomDataGenerator:
    def __init__(self):
        # 初始化随机数据生成器
        self.random = random.Random()

    #随机获取姓名
    def get_name():
        Name_List = [
            "HSqGuRg7zP3DQoVaGhvcag==",
            "FT+jMKEF0VdOABLQeYy9tw==",
            "Mm7I5/antFNFdJWIRTyFrA==",
            "ch9U0a0wzwOPlRXmP/0UfA==",
            "HGLWRC+4Q0Vpg900h9Fuzw==",
            "T+T4W+l0GrIJEikXRO5qVQ==",
            "+uy+FcPqDw2SP2YaE2EX2Q==",
            "U98ujteL/kTdQA0Bgi6KXg==",
            "DoX8pcQCz/6ekU2eLCbtZw==",
            "9qfk+7eo1WAn/ey0jn3rxQ==",
            "8m8hQkcyYxgCnkmuSeOpMg==",
            "SFXTe3pwdyVQY57SseEYZg==",
            "6iFge4i2jQVUYz+0m4jAPg==",
            "WEvJTTMdZaEoKUyFxnNmQw==",
            "FELk5aFRU50Ch5fjj3wsOQ==",
            "qvUgxLuXjEDzI2DDrgFU5A==",
            "rHABPalGN5xEdAMSJPn4dQ==",
            "I0iCclv2/UqiRIX4XOeOVQ==",
            "SkPNF88NYnr4kSfLrVWRZA==",
            "jjAB/q96Ren5upCfxM7qoQ==",
            "ecCTq6hk6UygwbCyeLep/A==",
            "zNCxTFDezlYYatOD4cXTgQ==",
            "iHQDjxajiNaVluUx7fdvOA==",
            "xmBfvaNQoEg1FtIabjG7zQ==",
            "7U4PLY/DSBQpKmHFemqlwA==",
            "4D3mlfy1JyH3hKd5VknQog==",
            "4kiR/pUOZqxVCAYq6ty7Lw==",
            "3E/nq8IhRLcAHaGo0CVb8Q==",
            "q7geu24tQO8NYUpaWIiGRg==",
            "rU9XQ0sv2p6MNyk2rmkDmg==",
            "3PMRaD2Lbov8iDRPLYmWgA==",
            "iHswurbsunSAdWxngDdnYA==",
            "k0kyMt2Cs7HFo6SCAiWf3g==",
            "txU0BJ9U2R27/eNUZ2jHwg==",
            "EAiNzSeIrfeBz42hgBJVww==",
            "j07IIGjA7GCTa06oS0At3w==",
            "kPBNlzFrlFwZLZNbW6MSYA==",
            "6r0yrRFskqYfSvF3+qTa9Q==",
            "4lwVshq/fkOgqYyvcGMvtQ==",
            "lC+Vxtm6Ec7GYPgPhKplJg==",
            "UThBaWkBevfZh5nJ3YiHcQ==",
            "qpZPz8GdXSDUHi1uCPgIdg==",
            "9YEotQ7DSGFOHvwhuVSOcw==",
            "Pi4wxWqsLXYYVuqE1GFUeA==",
            "im7X+SaAbXjuvmkxL9CaGQ==",
            "X61N9Uk67L9aaFWKiUIyfA==",
            "vp8TXUAfKSz5dlrNye71pA==",
            "vR01jOAPhidfXKh9DB+nIQ==",
            "hNUHtNFQLihplBPLhbVfAA==",
            "Vj7B/s3HNT4XZad6c4Udxw==",
            "MuWZreQCe0uou+IBAYzKAA==",
            "P7r7rKZ+Qcw1aH8oSRwsyA==",
            "G+wPP9fc+jTjDSouvfFKvA==",
            "F2EQNDaeNRhaMZDukw7yCA==",
            "IyX9k8NzlSWogkZZHBq0zA==",
            "n383WYD9MaFRtimwdVK8OA==",
            "+OeYAm92VMMmy3vcqMeK8Q==",
            "gZfCGbJzD8Q6as2FeYqvHw==",
            "3tz8N9WgCN/iFFokRe0bFA==",
            "YPDvXTfPFqUg47PykB4VlQ==",
            "NpmVa8MZlGdQtDVvTqdaVQ==",
            "+gCff5B+fZaZqI6EmfT5Jg==",
            "UCTw1py5PPQQjrxWPJY8Jw==",
            "KFRYotUWIiYXHeyCWzdlBg==",
            "hLoPLXZ8Vzm7w1LYtp2l2w==",
            "ksFcF2PYypphHhwPAvrr/Q==",
            "ZKp3gi/ctz66ft0njoiJIQ==",
            "Z5nKVp3oV0tRKTwug6yURw==",
            "1d84y5h/VOx2Ufaj/Nhqtg==",
            "xLZY+DpXgmw+CPY6deYHyg==",
            "BDGoURsQwkFntHYj1usjKw==",
            "5mZDFxjPhJ6nBZhF2r5L4g==",
            "LVIFG4GVnZZ13iN19kvgNg==",
            "s0rYhPA47gLhP+Oy2l3yDw==",
            "CDAPXy4b6p/K6+YCBbgYpg==",
            "o7n/+mOAJS/im0UmewzQ9g==",
            "Vx5RGQLa51QS3bScAExwWw==",
            "IbmYqbA4hQ4GgOEOiNOKJg==",
            "RWlXGxryyoTKghTfQYKQ0w==",
            "VXRLC51kjvsxoL8P24sECg==",
            "5DTwO2ckmyXfIT9I34PGhQ==",
            "iS6iJIB+VvoL0lopBYPkCA==",
            "9J+KYvHbZ7ktIDx17N0V9g==",
            "9ACjBh+N+JfT+wuvL1osgw==",
            "sEFAAZJojjJOdz7WNquMAw==",
            "SJapumssXkmdrV8u1gw9pQ==",
            "QEL17guYUohfGmHyZ+DKEQ==",
            "NvBeYOvSfffjjR+6NfmTnA==",
            "aF+n72pMz7YSt7yuwVymZg==",
            "v+rGsGIpv+ko8DpFslM5GA==",
            "uXSRrB5wN+7ol211gZKRHA==",
            "eaUGrBiujR0hBPcjPYvwcQ==",
            "CxZWqaskbrGcQVsxSPZGVw==",
            "0je4i6qJTWMB8/aDi44G2w==",
            "LBYdCUJzeqc2fXW3k2sh0g==",
            "ObMIUwSPDBRA0cJn/AFsww==",
            "7mJYZKYQdVgJSizuMGObMg==",
            "FG52asZ28zxTFqUVl83eBA==",
            "vJMbzsijLyGsXFpCH0L5sA==",
            "9tsQ6qTxndAaFCjoOeFr9Q==",
            "FaIhUFgCw1IRGx3CDFhkdA==",
            "c1L5twKgNlY4gG5UTYVWUQ==",
            "anXv8vv/sdCFXvU/oksXig==",
            "cSJsRtTgb5/eIwQMu/ZRqw==",
            "556kXoNVylnBm3460bRybA==",
            "MI4NCkP9WZ24BdMilzwHDg==",
            "Ln9iPBPuh/cmr7uzoCzJUg==",
            "1O/iEMHei2ploTdMvbxqZQ==",
            "roj9tDiZSESP8YGR55LdRw==",
            "0HuVQkclr8MBtVYSPxX54w==",
            "DYnkifuu/4tUvWL3c068PA==",
            "ZiYJDTWq0LhGmH+iSQHWvg==",
            "DHR9SgHhD6bS6TipNJisaw==",
            "weCv9zc5kwRm88pRyBxYAQ==",
            "s8WOl62EAj1xplkRnA7CCQ==",
            "kGgclnhb8amzrFMF/OPmsQ==",
            "3qnG8OwWDA9Ml6jbhD2R6A=="
        ]
        return random.choice(Name_List)

    #随机获取手机号
    def get_contact():
        Contact_List = [
            "ND/PmPEXTj4zW8Rhf3Bx1Q==",
            "KQ/a1aNLppBVt09khkZL1g==",
            "G1hJsnMtZbJ8NDp8yPEBog==",
            "iBnVqq/UqgNyJapNidlNbg==",
            "0uKd7Md/e4c7dgzO7dL1Rg==",
            "Gqj5yWsRTibqcIJ2rGDGeg==",
            "jiCK39TIvtdeMqLgmAvDfg==",
            "d08+yw3jq0JNHuoJKMs9CA==",
            "cDKRd8P7PQgdrP19gzOO2Q==",
            "kv5+UBzN/ouS0drg3fPWsw==",
            "m2ZNA1nqLUcYOH4aMZRfOw==",
            "R+YH03zXwTQM59lL6OcjIw==",
            "r2p0fkFSFvgljAOKJm5pAw==",
            "VsptLamlzYl5YoBhTWOhrw==",
            "VsptLamlzYl5YoBhTWOhrw==",
            "Tfda4s3Eurn4DqSOwlfHgA==",
            "FBwybuMvhsCRDq84EugrAg==",
            "IJ02ElX8YhDmhIxigC/bKw==",
            "Fp9rrm1XqWhBxecdGuuYig==",
            "GKyw868ZKIMft29RLChRxA==",
            "hkqhZuBM8g02hRkseO/mfA==",
            "S9M4O5ceIhkJqfS3KlIzWQ==",
            "O1D9zwA8oq7XpOz0j59OJg==",
            "diwDcxiv7cFQuRf7XeO+bg==",
            "vEdsxqfhK6/CDWFzlD7Yew==",
            "A1zz4wLBw0ZQHQV2o0wjmA==",
            "35ol0ZMMmvixk/nrp6Ev5w==",
            "nFMFLhwjqPfVZHvJ0U21oA==",
            "ZKy0GDuw2Zi5CWgBJdiYDQ==",
            "nvHb4N1XhwfhEapkyib9Bg==",
            "i9UdJfU+siO5O2CVxQGBAA==",
            "QR1nwPVGbqA73SHEt2ffJg==",
            "njbsX/UpmVgMkI4Kwc4OZw==",
            "fyI9AdmgozrcvU3JwLGxuw==",
            "hq0/2VsXRnERoCjY9jFbmQ==",
            "qiX0onenZVBGcmpacPyOFw==",
            "WbLkewxm80wl35LSRPFgBw==",
            "MBm3pbVHlvgm7uZ/2DWssA==",
            "/6hgqCzvVVPvpbVMNrreUw==",
            "s8CkqDwIqQs8TSKW94s/kA==",
            "ZmONSHZQ2nSywXJm9byjEA==",
            "2jaSl5U1oVOLSfS8FD99vQ==",
            "DF0C/+6SOiSsFZ1K6ALGcQ==",
            "Icq8OT8m16jsqNnxJvc3TQ==",
            "0wsgsVMGE7pZSc5awxv3RA==",
            "kPrpCYqi6jcxn8T1jjQC3Q==",
            "Pag3PXcitsq2ABG85ce+yQ==",
            "iyyjYFEXelwg47yY0EkzMQ==",
            "+xUxKVc5QxAq4R/t9QLJeg==",
            "dAJJSWNfrZqj8SAQZRYyhA==",
            "WGwz+SFXKrqVaDJJmQO6dA==",
            "3kLfkaaxKww98wAParoj8w==",
            "NNJPho7YlbgwcancCURWTw==",
            "oW0zLG7RzcdjRtLPK0otOA==",
            "DtYPDzegFWQH9eGA1IAN/A==",
            "9XOVMhgKtHBMRGTgQMvhww==",
            "gI1HrUsKYL+61H14f/my9Q==",
            "m9moOA2+1+toOSzP1pI0GA==",
            "Z5LQ8OD+ztagzaHbpj6FbQ==",
            "cN4KtN2CPG2vPJmSiYq8pQ==",
            "DFbA4QpWxsRtckwUeOB6Tw==",
            "3RhXRI6z3SOWe5yTpZqrhg==",
            "wUQ2bJW3rl3ejFSweCVqcA==",
            "SWDGR9ii2BV8ee2wq2WQ+A==",
            "39FF2QiU9knrMFoJAg0Kew==",
            "oYWQ2NK8NPEugVZaKmm+fQ==",
            "YOJbGcCpInwD1BeabTLwXQ==",
            "fh7PX4m+f8jHzWnObtjyGQ==",
            "wIRitkbvQOrSwZS4desiGg==",
            "Si/3PG4V9SE5VaKt7TrwOw==",
            "2q+HmBmAw+uHJ/ZnCvE6qA==",
            "eh2Bo0RB5/S0J0NYhq/cEw==",
            "NG/dTAPxvxnfi9yt9BA7rg==",
            "oAdLGg07+gdhSPCrf4nsNg==",
            "In6dmHqD6kGstDKVMrpjgg==",
            "Ba4bdd7oU25zED1I9q9RKw==",
            "4InCB9WQ5qp5WgFqvJojoA==",
            "glnCcfsestO80ly+KDiPsg==",
            "W1S1WVJe/QDngwdWAmlhVA==",
            "WvkWBAlUNHr3aLmLmOIYsA==",
            "4r48UxJ/uZ9fK4gpYC9Kag==",
            "J5yyQ5nIzVPlw/vzOJknzQ==",
            "pv7qiqXzyVPm8iFb2qT5vA==",
            "ZY3IRBQ9LSwv4678aCAA1w==",
            "5/xErBX6uo7GF5zF0w3V/w==",
            "ptSjUE7l0hLP2itX2XdjEw==",
            "vTJyTrsvB+uUK2mIHEQacQ==",
            "fTGyqpkzlAdD6mFMf843PQ==",
            "zA0sVFVoGE7DOSxOqShGOA==",
            "xaOV8V2fSQkgsqag/jUTCg==",
            "L8aY4R8XhTW2k5ToXDWnIA==",
            "eGVBrk2e0FI9+YnC2lnjVA==",
            "AfvuC9bvd3r11+nb2nioNg==",
            "QeKXP5lexJBNLu4CN29a6g==",
            "w4u7D/1O8ygJ1fVyT8SeGA==",
            "k8m2SQjEHiiz2lauKc4vFw==",
            "ouJs2VuYfdp2ZYhYq2WLxg==",
            "YZtSOKpN842QxVv1cr8seg==",
            "II9QM2P9eKT3iEid0bQzpQ==",
            "n4Y5gaP7iLMP0/iyQB0PYA==",
            "R4GFw/DLX+A8gyHJl2mGfw==",
            "MzFCOh197EpFXqSjV7dRyw==",
            "s+jcGAcUS7P6A6Msj6W3Eg==",
            "44M4FCdOAwxhS2K2vUTalg==",
            "nESTP5lWnL/Vkvc+Kt8UiA==",
            "JGz5194IZtB+M+ZB2CghUw==",
            "ayneUeZANhQcY0R1vYdg8w==",
            "1AqozFBvqpXOST4GS83iTw==",
            "eWkcui604+x460MTo1RfkA==",
            "JaGIN3FwGBI/bSjEnQrXBQ==",
            "BJfDiSsYrIqmNI05ICH1ng==",
            "gXtXoEYePyjmxN++HWfNXQ==",
            "Rnr1/q13NXgwFN3/lWAC1g==",
            "fbqUR9rlH48QI8KmtyWVUQ==",
            "6C97S4JANMTZ/OxnTO31kA==",
            "sZfSbGogYCMj90xElML88Q=="
        ]
        return random.choice(Contact_List)

    #随机获取机构名称
    def get_angency_name():
        # 定义机构列表
        agency_list = [
            "上海瀚海检测技术股份有限公司",
            "深圳市环测威检测技术有限公司",
            "佛山市华谨检测技术服务有限公司", 
            "上海复达检测技术集团有限公司",
            "迅翎企业服务（上海）有限公司",
            "上海国信达检测技术有限公司",
            "数智诊科技有限公司",
            "上海华信检测技术有限公司",
            "上海科达检测技术有限公司",
            "泰尔认证中心有限公司",
            "北京中小企业发展服务中心",
            "浪潮云洲工业互联网有限公司",
            "山东青鸟工业互联网有限公司",
            "山东赛迪工业和信息化研究院有限公司",
            "山东百谷云计算有限公司",
            "山东智云信息科技有限公司",
            "山东山科数字经济研究院有限公司",
            "山东渤聚通云计算有限公司",
            "德州腾元互联网科技有限公司",
            "山东文衡科技股份有限公司",
            "上海邮电设计咨询研究院有限公司",
            "江苏欣业企业服务有限公司",
            "上海丰启信息技术有限公司",
            "江苏巨边科技有限公司",
            "广东云智科技有限公司",
            "浙江数字智慧科技股份有限公司",
            "安徽智慧企业管理有限公司",
            "四川博创科技有限公司",
            "湖北云起成网络科技有限公司"
        ]
        # 随机选择一个机构
        return random.choice(agency_list)
    #随机生成场景等级
    def get_scenario_level():
        return random.randint(1, 5)

    #随机生成日期
    def get_date():
        month = random.randint(1, 4)
        day = random.randint(1, 28)
        return f"2025-{month:02d}-{day:02d} 00:00:00"

    #随机生成调研情况
    def get_research_description()->str:
        descriptions = [
            "设备联网率偏低，MES系统显著改善生产质量。边缘计算改造因成本限制需分阶段实施。",
            "ERP基础模块普及度高，但智能排产应用较少。企业想通过政策支持实现设备联网，大幅缩短交付周期。",
            "数控机床普及率高，但仿真软件严重依赖进口。海外授权费用成为成本负担",
            "智能监测设备覆盖率较低。",
            "区块链溯源系统增加成本，但客户有支付溢价意愿。",
            "生产数据采集全面，AI质检仍需人工复核。",
            "供应链协同改善库存周转，上游供应商数字化对接不足。",
            "设备效率监测系统提升利用率，数据分析依赖外包服务。",
            "客户系统对接率低，标准化产品面临价格竞争压力。",
            "能耗监测系统渗透不足，工艺优化降低电力消耗。",
            "老旧设备改造成本高，工业网关实现部分设备联网。",
            "包装线已部署自动化设备，但生产数据与仓储系统未打通。临时采用手工报表导致库存误差率居高不下。",
            "设备联网率不足50%，部分进口设备因协议封闭无法接入MES系统。设备利用率分析仍靠人工记录。",
            "为配合主机厂要求部署QMS系统，但一线员工操作繁琐，出现数据录入滞后现象。",
            "使用进销存软件管理库存，但供应商协同靠微信沟通。错发漏发频次较高，正试点供应链协同平台。",
            "设备维护记录用纸质台账，突发故障平均修复时间超8小时。计划引入预测性维护方案。",
            "远程监控平台可查看设备运行状态，但故障诊断知识库更新滞后。",
            "设备检测数据与MES系统未打通，质量分析仍依赖人工导出Excel报表。",
            "生产与ERP系统数据不同步，导致库存盘点误差率超行业标准。",
            "进销存系统与物流平台API对接失败，需专人每天手动导入运输单号，错发率上升至5%。",
            "数据自动采集设备损坏后，改用纸质记录补录，存在监管合规风险。",
            "远程运维平台能查看设备状态，但知识库未更新最新故障代码，30%问题仍需现场解决。",
            "工程师为赶工期常走线下流程，系统数据完整性仅65%。",
            "已实现设备联网，但不同品牌设备通讯协议不兼容，数据采集完整率仅达70%，需人工补录关键工序数据。",
            "MES系统强制扫码报工，但老旧设备无扫码接口，工人用个人手机代扫导致数据失真。",
            "备件库存积压达正常值的3倍，占用流动资金超预期。",
            "WMS系统与运输平台数据不同步，装卸工常按纸质单据发货，导致系统库存误差率持续高于8%。",
            "数据自动录入ERP时，因网络延迟导致批次记录错位，需质量员每日核对修正。",
            "案例库关键词检索失效，技师需翻查3个月内的维修记录才能找到相似故障解决方案。",
            "设备联动时间不同步，导致部分批次无法关联工艺参数。"
        ]
        return random.choice(descriptions)